import asyncio
import datetime
import logging

from aiogram import Dispatcher
from aiogram.types import CallbackQuery
from aiogram_dialog import DialogManager, Dialog, Window
from aiogram_dialog.widgets.kbd import Button, Url
from aiogram_dialog.widgets.text import Const, Format

from app.bot import states
from app.models.operation import YoomoneyOperation
from app.services.wallet.wallet_api import IWallet
from app.services.database.dao import IDAO


async def finish_dialog(c: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await dialog_manager.done()


async def payment_menu_getter(dialog_manager: DialogManager, **kwargs) -> dict:
    cfg = dialog_manager.middleware_data["cfg"]
    amount = cfg.yoomoney_payment_amount
    wallet: IWallet = dialog_manager.middleware_data["wallet"]
    payment_url = await wallet.create_payment_form(float(amount), dialog_manager.event.from_user.id, cfg.yoomoney_success_url)

    return {
        "payment_url": payment_url,
        "payment_amount": amount,
    }


async def check_paid(c: CallbackQuery, button: Button, dialog_manager: DialogManager):
    wallet: IWallet = dialog_manager.middleware_data["wallet"]
    db: IDAO = dialog_manager.middleware_data["db"]

    operations: list[YoomoneyOperation] = await wallet.get_operations_history(
        operations_type="deposition",
        label=str(c.from_user.id),
        records_count=1,
        # from_time=datetime.datetime.now() - datetime.timedelta(days=1),
        # till_time=datetime.datetime.now(),
    )
    operations = []
    logging.info(operations)
    if operations:
        await db.add_subscription(c.from_user.id, datetime.datetime.now() + datetime.timedelta(days=30))
        await db.commit()
        await dialog_manager.switch_to(states.user.BuySubscription.PAYMENT_RECEIVED)
        return
    else:
        await c.answer("–í–æ–∑–º–æ–∂–Ω–æ, –ø–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –¥–æ—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ –æ–¥–Ω—É –º–∏–Ω—É—Ç—É.", show_alert=True)
    # await dialog_manager.switch_to(states.user.BuySubscription.PAYMENT_CANCELED)


send_payment_url_window = Window(
    Format("""
–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ!
–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –≤—Å–µ–≥–æ <b>299</b> —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü!
<b>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
- –£–¥–æ–±–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –≤–∞–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.
- –û–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∏–∑ –±–æ–ª–µ–µ —á–µ–º 15 –∫–∞–Ω–∞–ª–æ–≤!
- –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞—Ö.
- –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

<b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>
- –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
- –°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–°–ë–ü)
–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –æ—Ç –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —É–∂–µ —Å–µ–≥–æ–¥—è! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:
"""
    ),
    Url(Const("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å"), Format("{payment_url}")),
    Button(Const("‚úÖ –û–ø–ª–∞—Ç–∏–ª"), id="paid_btn", on_click=check_paid),
    state=states.user.BuySubscription.PAYMENT,
    getter=payment_menu_getter,
    parse_mode="HTML"
)


payment_received_window = Window(
    Const("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–Ω–µ—Ç–µ—Å—å –¥–æ–≤–æ–ª—å–Ω—ã –æ–ø—ã—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π. –¢–æ—Ç —Å–∞–º—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –∂–¥—ë—Ç –≤–∞—Å!"),
    Button(Const("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"), id="back_to_menu", on_click=finish_dialog),
    state=states.user.BuySubscription.PAYMENT_RECEIVED
)


payment_canceled_window = Window(
    Const("–ú—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ–ø–ª–∞—Ç—É –∑–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑."),
    Button(Const("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"), id="back_to_menu", on_click=finish_dialog),
    state=states.user.BuySubscription.PAYMENT_CANCELED
)


buy_subscription_dialog = Dialog(
    send_payment_url_window,
    payment_received_window,
    payment_canceled_window,
)


def setup_buy_subscription(dp: Dispatcher) -> None:
    dp.include_routers(buy_subscription_dialog)

